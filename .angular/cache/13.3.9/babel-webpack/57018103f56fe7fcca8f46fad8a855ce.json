{"ast":null,"code":"import * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"renderCanvas\"]; // import { DragControls } from \"three/examples/jsm/controls/DragControls\";\n\nexport let CanvasComponent = /*#__PURE__*/(() => {\n  class CanvasComponent {\n    constructor() {\n      this.scene = new THREE.Scene();\n    }\n\n    ngOnInit() {\n      this.scene = new THREE.Scene();\n      const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n      const renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      document.body.appendChild(renderer.domElement);\n      this.scene.add(camera);\n      this.scene.background = new THREE.Color(\"white\");\n      camera.position.set(500, 800, 1300);\n      camera.lookAt(0, 0, 0);\n      new OrbitControls(camera, renderer.domElement);\n      const geometry1 = new THREE.BoxGeometry(1, 1, 1);\n      const material = new THREE.MeshBasicMaterial({\n        color: 0x00ff00\n      });\n      const cube = new THREE.Mesh(geometry1, material);\n      this.scene.add(cube);\n      const gridHelper = new THREE.GridHelper(1000, 20);\n      this.scene.add(gridHelper);\n      const geometry = new THREE.PlaneGeometry(1000, 1000);\n      geometry.rotateX(-Math.PI / 2);\n      const plane = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({\n        visible: false\n      }));\n      this.scene.add(plane);\n\n      const render = () => {\n        requestAnimationFrame(render);\n        renderer.render(this.scene, camera);\n      };\n\n      render();\n    }\n\n  }\n\n  CanvasComponent.ɵfac = function CanvasComponent_Factory(t) {\n    return new (t || CanvasComponent)();\n  };\n\n  CanvasComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CanvasComponent,\n    selectors: [[\"app-canvas\"]],\n    viewQuery: function CanvasComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.rendererCanvas = _t.first);\n      }\n    },\n    decls: 0,\n    vars: 0,\n    template: function CanvasComponent_Template(rf, ctx) {},\n    styles: [\"\"]\n  });\n  return CanvasComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}